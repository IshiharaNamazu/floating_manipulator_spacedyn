function LP = fm_linkparam()

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%% 各リンクパラメータの定義 %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% リンクの連結関係を定義する %%%%%
% LPは各リンクの初期条件を記述している
% LPをデータで渡すときに様々なデータを渡せるように、構造体にしている

% BB(i) = 根元側で結合しているリンク番号

LP.BB = [0 1 2 3 4 5]; % 親リンクの番号
LP.J_type = [ 'R' 'R' 'R' 'R' 'R' 'R' ];

LP = make_lp_from_bb(LP);


%%%%% ベース部 (リンク0) の質量 %%%%%
LP.m0 = 2550;

%%%%% ベース部 (リンク0) の慣性モーメント %%%%%
LP.inertia0 = [
    6200 48.2 78.5;
    48.2 3540  -29.2;
    78.5 -29.2 7090
    ];   % 0の部分がカップリング項(慣性乗積？)


LP.m = [ 35.0 22.5 21.9 16.5 26.0 18.5 ]; % リンク質量

%%%%% リンク系全体の質量 %%%%%
LP.mass = sum(LP.m) + LP.m0;


link_len = [0.350, 0.870, 0.630, 0.275, 0.277, 0.532];
link_offset = [0.28, 0, 0, 0, 0, 0]; % 次のリンクまでのずれと思われる

LP.c0 = [
    -0.79 0 0  0 0 0;
    -0.29 0 0 0 0 0;
    1.00 0 0  0 0 0 ]; % 衛星本体から見たリンクの座標(縦ベクトルxn個)

LP.cc = zeros(3,LP.num_q,LP.num_q); % リンク重心と関節の位置関係
% cc(i,i) リンクiの根本に向かう位置ベクトル cc(i,j) リンクiからjに向かう位置ベクトル
% joint座標で関節が伸びてる向き 1:z 2:x 3:x 4 x 5 x 6 x
LP.cc(:,1,1) = [ 0 0 -link_len(1)/2 ]';
LP.cc(:,2,2) = [-link_len(2)/2 0 0]';
LP.cc(:,3,3) = [-link_len(3)/2 0 0]';
LP.cc(:,4,4) = [-link_len(4)/2 0 0]';
LP.cc(:,5,5) = [-link_len(5)/2 0 0]';
LP.cc(:,6,6) = [-link_len(6)/2 0 0]';
LP.cc(:,1,2) = [ link_offset(1) 0 link_len(1)/2 ]';
LP.cc(:,2,3) = [ link_len(2)/2 0 link_offset(2) ]';
LP.cc(:,3,4) = [ link_len(3)/2 0 link_offset(3) ]';
LP.cc(:,4,5) = [ link_len(4)/2 0 link_offset(4) ]';
LP.cc(:,5,6) = [ link_len(5)/2 0 link_offset(5) ]';

LP.Qi = zeros(3,6); % 親関節とリンクi間のRPY?

% 論文fig 5の初期状態
LP.Qi(:,1)  = [0 0 0]';
LP.Qi(:,2)  = [0 pi/2 pi]';
LP.Qi(:,3)  = [0 pi pi/2]';
LP.Qi(:,4)  = [0 pi/2 pi]';
LP.Qi(:,5)  = [0 pi/2 -pi/2]';
LP.Qi(:,6)  = [0 pi/2 -pi/2]';

% 末端リンクから端点までの位置ベクトル  末端リンクの重心から手先への位置ベクトル
% 末端部を持たないリンクは0を入れる
LP.ce = zeros(3, LP.num_q);
LP.ce(:, 6) = [link_len(6)/2 0 0]';
% 末端リンクから端点までのRPY
LP.Qe = zeros(3, LP.num_q);


%%%%% リンクの慣性テンソル%%%%
link_radius = 0.2;
bou = @(i) LP.m(i)*link_len(i)*link_len(i)/12;
enbn = @(i) LP.m(i)*link_radius*link_radius/2;

Izz = [1.69 3.75 2.53 0.072 0.13 0.26];
Iln = zeros(3, 3, 6);
Iln(:, :, 1) = [
    bou(1) 0 0;
    0 bou(1) 0;
    0 0 Izz(1)
    ];
Iln(:, :, 2) = [
    enbn(2) 0 0;
    0 Izz(2) 0;
    0 0 Izz(2)
    ];
Iln(:, :, 3) = [
    enbn(3) 0 0;
    0 Izz(3) 0;
    0 0 Izz(3)
    ];
Iln(:, :, 4) = [
    enbn(4) 0 0;
    0 Izz(4) 0;
    0 0 Izz(4)
    ];
Iln(:, :, 5) = [
    enbn(5) 0 0;
    0 Izz(5) 0;
    0 0 Izz(5)
    ];
Iln(:, :, 6) = [
    enbn(6) 0 0;
    0 Izz(6) 0;
    0 0 Izz(6)
    ];

% 6つの3x3行列を横に並べて3x18行列を作成
LP.inertia = reshape(Iln, 3, 18);
LP.inertia

return